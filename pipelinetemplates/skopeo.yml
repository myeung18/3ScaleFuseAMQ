def namespace, appReleaseTag, webReleaseTag, prodCluster, prodProject, prodToken

pipeline {
    agent {
        label 'skopeo'
    }
    stages {
        stage('Choose Release Version') {
            steps {
                script {
                    openshift.withCluster() {
                        // Login to the production cluster
                        namespace = openshift.project()
                        prodCluster = env.PROD_MASTER.replace("https://","insecure://")
                        withCredentials([usernamePassword(credentialsId: "${namespace}-prod-credentials", usernameVariable: "PROD_USER", passwordVariable: "PROD_TOKEN")]) {
                            prodToken = env.PROD_TOKEN
                        }

                        // Get list of tags in the ImageStream to show the release-manager
                        def appTags = openshift.selector("istag").objects().collect { it.metadata.name }.findAll { it.startsWith 'app:' }.collect { it.replaceAll(/app:(.*)/, "\$1") }.sort()
                            timeout(5) {
                                    def inputs = input(
                                        ok: "Deploy",
                                        message: "Enter release version to promote to PROD",
                                        parameters: [
                                        string(defaultValue: "prod", description: 'Name of the PROD project to create', name: 'PROD Project Name'),
                                        choice(choices: appTags.join('\n'), description: '', name: 'Application Release Version'),
                                        ]
                                    )
                                    appReleaseTag = inputs['Application Release Version']
                                    prodProject = inputs['PROD Project Name']
                            }
                    }
                }
            }
        }
        stage('Create PROD') {
            steps {
                script {
                    openshift.withCluster(prodCluster, prodToken) {
                        openshift.newProject(prodProject, "--display-name='CoolStore PROD'")
                    }
                }
            }
        }
        stage('Promote Images to PROD') {
            steps {
                script {
                    openshift.withCluster() {
                        def srcApplicationRef = openshift.selector("istag", "app:${appReleaseTag}").object().image.dockerImageReference
                        def destApplicationRef = "${env.PROD_REGISTRY}/${prodProject}/app:${appReleaseTag}"
                        def srcToken = readFile "/run/secrets/kubernetes.io/serviceaccount/token"
                        sh "skopeo copy docker://${srcApplicationRef} docker://${destApplicationRef} --src-creds openshift:${srcToken} --dest-creds openshift:${prodToken}"
                    }
                }
            }
        }
        stage('Deploy to PROD') {
            steps {
                script {
                    openshift.withCluster(prodCluster, prodToken) {
                        openshift.withProject(prodProject) {
                            def template = 'https://raw.githubusercontent.com/openshift-labs/myapp/myapp-template.yaml'
                                openshift.apply(
                                    openshift.process("-f", template, "-p", "APPLICATION_IMAGE_VERSION=${appReleaseTag}", "-p", "IMAGE_NAMESPACE=")
                                )
                        }
                    }
                }
            }
        }
    }
}
