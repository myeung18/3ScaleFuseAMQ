apiVersion: template.openshift.io/v1
kind: Template
labels:
    template: pipeline-bluegreen-fisuser-test
metadata:
  annotations:
    description: RHTE Deployment Pipeline
  name: pipeline-bluegreen-fisuser-test
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
    name: pipeline-bluegreen-fisuser-test
  spec:
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: |-
           pipeline {
                agent {
                    node {
                        label 'maven'
                    }
                }
                parameters{ 
                    string (defaultValue: 'notinuse', name:'OPENSHIFT_HOST', description:'open shift cluster url')
                    string (defaultValue: 'notinuse', name:'OPENSHIFT_TOKEN', description:'open shift token')
                    string (defaultValue: 'docker-registry.default.svc:5000', name:'IMAGE_REGISTRY', description:'open shift token')
                    string (defaultValue: 'rh-dev', name:'IMAGE_NAMESPACE', description:'name space where image deployed')
                    string (defaultValue: 'rh-dev', name:'DEV_PROJECT', description:'build or development project')
                    string (defaultValue: 'rh-test', name:'TEST_PROJECT', description:'Test project')
                    string (defaultValue: 'rh-prod', name:'PROD_PROJECT', description:'Production project')
                    string (defaultValue: 'https://github.com/myeung18/3ScaleFuseAMQ.git', name:'GIT_REPO', description:'Git source')
                    string (defaultValue: 'master', name:'GIT_BRANCH', description:'Git branch in the source git')
                    string (defaultValue: 'dbuser', name:'MYSQL_USER', description:'My Sql user name')
                    string (defaultValue: 'password', name:'MYSQL_PWD', description:'My Sql user password')
                    string (defaultValue: 'v1.1', name:'SERVICE_VERSION', description:'This service version to be built')
                }
                environment {
                    MODULE_NAME = 'fisuser-service'
                }
                stages {
                    stage ('source') {
                        steps {
                            git url: params.GIT_REPO, branch: params.GIT_BRANCH                
                        }
                    }
                    stage('Build Service') {
                        environment {
                            srcTag = 'latest'
                        }
                        steps {
                            echo "Building.. ${MODULE_NAME} "
                            //build(env.MODULE_NAME)

                            echo "Deploying ${MODULE_NAME} to rh-dev"
                            //deploy(env.MODULE_NAME, params.DEV_PROJECT, params.OPENSHIFT_HOST, params.OPENSHIFT_TOKEN, params.MYSQL_USER, params.MYSQL_PWD)
                            tagImage(params.IMAGE_NAMESPACE, params.TEST_PROJECT, env.MODULE_NAME, env.srcTag, params.SERVICE_VERSION)
                        }
                    }
                    stage('Pushing to Test') {
                        steps {
                            echo "Deploy ${MODULE_NAME} to rh-test "
                           promoteServiceSetup(params.OPENSHIFT_HOST, params.OPENSHIFT_TOKEN, env.MODULE_NAME,params.IMAGE_REGISTRY, params.IMAGE_NAMESPACE, params.SERVICE_VERSION, params.TEST_PROJECT, params.MYSQL_USER, params.MYSQL_PWD)
                           promoteService(params.IMAGE_NAMESPACE, params.TEST_PROJECT, env.MODULE_NAME + "-" + params.SERVICE_VERSION)
                        }
                    }
                    stage('Pushing to Prod') {
                        steps {
                            echo "Deploy ${MODULE_NAME} to rh-prod "
                            promoteServiceSetup(params.OPENSHIFT_HOST, params.OPENSHIFT_TOKEN, env.MODULE_NAME,params.IMAGE_REGISTRY, params.IMAGE_NAMESPACE, params.SERVICE_VERSION, params.PROD_PROJECT, params.MYSQL_USER, params.MYSQL_PWD)
                            promoteService(params.IMAGE_NAMESPACE, params.PROD_PROJECT, env.MODULE_NAME + "-" + params.SERVICE_VERSION)
                        }
                    }
                }
            }

            def promoteServiceSetup(openShiftHost, openShiftToken, svcName,
            registry, imageNameSpace, tagName, projName, mysqlUser, mysqlPwd) {
                try{ 
                  sh """
                      oc delete dc ${svcName}-${tagName} -n ${projName} 2> /dev/null
                  """
                } catch (Exception e) {
                  echo "skip dc/svc/route creation related exception, the resource may already exist. " + e.getMessage();
                }
                try {
                    sh """ 
                        oc create dc ${svcName}-${tagName} --image=${registry}/${imageNameSpace}/${svcName}:${tagName} -n ${projName} 2> /dev/null 
                        oc env dc ${svcName}-${tagName} MYSQL_SERVICE_NAME=mysql -n ${projName} 2> /dev/null
                        oc env dc ${svcName}-${tagName} MYSQL_SERVICE_USERNAME=${mysqlUser} -n ${projName} 2> /dev/null
                        oc env dc ${svcName}-${tagName} MYSQL_SERVICE_PASSWORD=${mysqlPwd} -n ${projName} 2> /dev/null
                        oc env dc ${svcName}-${tagName} JAVA_APP_DIR=/deployments -n ${projName} 2> /dev/null
                        oc deploy ${svcName}-${tagName} --cancel -n ${projName}  2> /dev/null

                        oc expose dc ${svcName}-${tagName} --name=${svcName}-green --port=8080 -n ${projName}  2> /dev/null
                    """
                } catch (Exception e) {
                  echo "skip dc/svc/route creation related exception, the resource may already exist. " + e.getMessage();
                }
            }
            def tagImage(imageNamespace, projName, svcName, sourceTag, destinationTag) {
                script {
                    openshift.withCluster() {
                        openshift.withProject( imageNamespace ) {
                            echo "tagging the build for ${MODULE_NAME} ${sourceTag} to ${destinationTag} in ${imageNamespace} "
                            openshift.tag("${MODULE_NAME}:${sourceTag}", "${MODULE_NAME}:${destinationTag}")
                        }
                    }
                }//script
            }

            def promoteService (imageNamespace, projName, svcName) {
                echo "Deploying service ${projName} to ${svcName}"
                openshiftDeploy(namespace: projName,
                    deploymentConfig: svcName,
                             waitTime: '300000')
            }


            def build(folderName) {
                sh """

                cd ${folderName}
                
                mvn package -Dmaven.test.skip=true 
                """

            }

            def deploy(folderName, projName, openShiftHost, openShiftToken,
            mysqlUser, mysqlPwd) {
                sh """
                cd ${folderName}

                oc project ${projName} 

                mvn fabric8:deploy -Dmaven.test.skip=true -Dmysql-service-username=${mysqlUser} -Dmysql-service-password=${mysqlPwd}
                """
            }
        env:
        - name: GIT_BRANCH
          value: ${GIT_BRANCH}
        - name: GIT_REPO
          value: ${GIT_REPO}
        - name: DEV_PROJECT 
          value: ${DEV_PROJECT}
        - name: TEST_PROJECT 
          value: ${TEST_PROJECT}
        - name: PROD_PROJECT 
          value: ${PROD_PROJECT}
        - name: MYSQL_USER 
          value: ${MYSQL_USER}
        - name: MYSQL_PWD 
          value: ${MYSQL_PWD}
        - name: IMAGE_NAMESPACE 
          value: ${IMAGE_NAMESPACE}
        - name: IMAGE_REGISTRY 
          value: ${IMAGE_REGISTRY}
parameters:
- name: GIT_REPO
  value: https://github.com/myeung18/3ScaleFuseAMQ.git
  required: true
- name: GIT_BRANCH
  value: master
  required: true
- name: DEV_PROJECT
  value: rh-dev
  required: false 
- name: TEST_PROJECT
  value: rh-test
  required: false 
- name: PROD_PROJECT
  value: rh-prod
  required: false 
- name: MYSQL_USER
  value: dbuser 
  required: true
- name: MYSQL_PWD
  value: password
  required: true
- name: IMAGE_REGISTRY
  value: docker-registry.default.svc:5000
  required: true
- name: IMAGE_NAMESPACE
  value: rh-dev
  required: true
